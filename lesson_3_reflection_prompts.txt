When would you want to use a remote repository rather than keeping all your work
local?

    The usage of remote repository is determined by the multiple needs:
    - to be able to access the content of the repository from 
    any other computer connected to the internet
    - to allow contribution from other team members
    - to backup your important project and worry less on the local data loss

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    This way it is easier to determine that everyone started working on the same 
    version of the file and git doesn’t need to worry about constant comparison
    of all the current changes. When someone in the team is finished with working 
    on his/her part others can start pulling the newly added changes.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Fork is a term used only within GitHub. The concept of a fork is similar to clone,
    only with fork it is easier to keep track of all the clones and acknowledge the owner
    of the project. So other people interested in the contribution can see not only the
    forked version but the original version as well.

    Clone would be a full copy of the project to a local machine.

    Branch is used within the same repository usually to start a test or development 
    version of the same project allowing the project owner to always keep a fully working 
    copy of his project and development version separately. When the feature under 
    development will be ready it will be possible then to merge it back to the main 
    project branch - master.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    The local copy of the last known state of the remote represents the last time 
    the communication with a network happened or the point after which you have local -
    not pushed changes. As remote branch gets updated and your local branch gets
    updated separately none of the changes get lost. Using “git fetch” would take the 
    changes made to the remote and store it locally along with changes what you have made.  
    This really useful because it is easy to update the last known state of the remote by
    merging local and remote changes.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    The could be different ways to collaborate without using Git, GitHub or both:
    1. Setting git on premises and not using GitHub as a hosting
    2. Using Mercurial, SVN (haven’t use any of these two myself), Microsoft Team Services
       or any other version control system or hosting.
    
    The usage of different systems can be harder to learn, but it could be more applicable 
    to specific types of projects, ex. systems not connected to the intranet - not the 
    public internet.
    

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
